#+TITLE:Emacs Configurations
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
* Package Setup
Initialize the archives
#+begin_src emacs-lisp
(package-initialize)
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")
			 ))
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

(unless package-archive-contents
  (package-refresh-contents))

(setq package-load-list '(all))  

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* MacOS Import Paths
  #+begin_src emacs-lisp
(defun set-exec-path-from-shell-PATH ()
  "Set up Emacs' `exec-path' and PATH environment variable to match
that used by the user's shell.

This is particularly useful under Mac OS X and macOS, where GUI
apps are not started from a shell."
  (interactive)
  (let ((path-from-shell (replace-regexp-in-string
			  "[ \t\n]*$" "" (shell-command-to-string
					  "$SHELL --login -c 'echo $PATH'"
						    ))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))
(set-exec-path-from-shell-PATH)
  #+end_src
* Basic UI
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(scroll-bar-mode -1) ; Disable Scrolling
(tool-bar-mode -1) ; Disable the toolbar
(tooltip-mode -1) ; Disable tooltips
(set-fringe-mode 10) ; Give some breathing room
(menu-bar-mode -1) ; Disable the menu bar
#+end_src
** Font
*** For linux
 #+begin_src
 (set-face-attribute 'default nil :font "Fira Code" :height 120 :weight 'normal)
 (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 120 :weight 'normal)
 (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 120 :weight 'normal)
 #+end_src
** Margins
FIXME: Here we trying to provide margins to org-mode documents however this breaks the ansi-terms
# #+begin_src emacs-lisp
# (use-package perfect-margin
#   :custom
#   (perfect-margin-visible-width 128)
#   :config
# )
# #+end_src
** Number Lines
#+begin_src emacs-lisp
(column-number-mode)
(require 'display-line-numbers)
(defcustom display-line-numbers-exempt-modes '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode org-mode)
  "Major modes on which to disable the linum mode, exempts them from global requirement"
  :group 'display-line-numbers
  :type 'list
  :version "green")

(defun display-line-numbers--turn-on ()
  "turn on line numbers but excempting certain majore modes defined in `display-line-numbers-exempt-modes'"
  (if (and
       (not (member major-mode display-line-numbers-exempt-modes))
       (not (minibufferp)))
      (display-line-numbers-mode)))

(global-display-line-numbers-mode)
#+end_src

** Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-one t))
#+end_src

* File Operations
** Dired
# #+begin_src emacs-lisp
# (use-package dired
#   :ensure nil
#   :defer 1
#   :commands (dired dired-jump)
#   :config
#   (setq dired-listing-switches "-agho --group-directories-first"
#         dired-omit-files "^\\.[^.].*"
#         dired-omit-verbose nil)

# (evil-collection-define-key 'normal 'dired-mode-map
#     "h" 'dired-single-up-directory
#     "l" 'dired-find-file))
# #+end_src

* Opening Externally
#+begin_src emacs-lisp
(use-package openwith
  :config
  (setq openwith-associations
    (list
      (list (openwith-make-extension-regexp
             '("mpg" "mpeg" "mp3" "mp4"
               "avi" "wmv" "wav" "mov" "flv"
               "ogm" "ogg" "mkv"))
             "mpv"
             '(file))
      (list (openwith-make-extension-regexp
             '("xbm" "pbm" "pgm" "ppm" "pnm"
               "png" "gif" "bmp" "tif" "jpeg")) ;; Removed jpg because Telega was
                                                ;; causing feh to be opened...
             "feh"
             '(file))))
  (openwith-mode 1))
#+end_src

#+RESULTS:
: t

Open links in firefox
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")
#+end_src

#+RESULTS:
: firefox

* Simple Quality of Life Improvements
I have a habit of hitting escape to exit out of buffers. This allows me to do so.
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
I have trouble remembering all the key commands. This package helps me follow.
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src
and this one makes it significantly easier to deal with all the parenthesis
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
I hate the cluter from the backup files, so I send store them all in a custom directory
#+begin_src emacs-lisp
(setq backup-directory-alist '(("" . "~/.emacs.d/backup")))
#+end_src
Company Mode
#+begin_src emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+end_src
Yasnippet
#+begin_src emacs-lisp
(setq yas-snipped-dirs "~/User_Configurations/snippets")
(yas-global-mode 1) 
#+end_src

#+RESULTS:
: t

* General Keyboard
#+begin_src emacs-lisp
(use-package ace-window)
(use-package general
  :config
  (general-create-definer rune/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (rune/leader-keys
    "w"  '(:ignore t :which-key "windows")
    "wm" '(delete-other-windows :which-key "maximize window")
    "wd" '(delete-window :which-key "delete window")
    "ww" '(ace-window :which-key "ace window")
    "f"  '(:ignore t :which-key "files")
    "fs" '(save-buffer :which-key "save buffer")
    "ff" '(find-file :which-key "find file")
    "q"  '(:ignore t :which-key "close")
    "qq" '(save-buffers-kill-terminal :which-key "emacs")
    "SPC" '(counsel-M-x :which-key "Counsel M-x")
    "TAB" '(next-buffer :which-key "next buffer")
    "c"  '(:ignore t :which-key "comment")
    "cc" '(comment-line :which-key "comment line")
    "u"  '(:ignore t :which-key "use")
    "us" '(ansi-term :which-key "terminal")
    "b"  '(:ignore t :which-key "buffer")
    "bb" '(switch-to-buffer :which-key "switch buffer")
    "bd" '(kill-buffer :which-key "delete buffer")
    "br" '(rename-buffer :which-key "rename buffer")
    "is" '(yas-insert-snippet :which-key "insert snippet")
    ))
#+end_src

#+RESULTS:
: t

* Ivy
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-h" . ivy-backward-kill-word)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :init
  (setq ivy-use-virtual-buffers t)
  :config
  (ivy-mode 1)
  )

(use-package ivy-rich
  :init
  (ivy-rich-mode 1)
  )
#+end_src


Counsel needs to be installed for the following commands to work
#+begin_src emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-M-l" . counsel-imenu)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :config
  (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^
(define-key ivy-minibuffer-map (kbd "<left>") 'counsel-up-directory)
(define-key ivy-minibuffer-map (kbd "<right>") 'ivy-alt-done)

(use-package helpful
  :ensure t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

* Projectile
#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :init
  (elpy-enable))

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Projects/Code")
    (setq projectile-project-search-path '("~/Projects/Code")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode))
(rune/leader-keys
    "s"  '(:ignore t :which-key "search")
    "sp" '(projectile-ripgrep :which-key "search project"))
#+end_src

*  Evil
#+begin_src emacs-lisp
(use-package undo-fu)
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)
  :custom
  (evil-undo-system (quote undo-fu))
)

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

  (rune/leader-keys
    "wv" '(evil-window-vsplit :which-key "window vsplit")
    "ws" '(evil-window-split :which-key "window hsplit")
    "TAB" '(evil-switch-to-windows-last-buffer :which-key "last buffer")
    )

#+end_src

#+RESULTS:

* Version Control
** Magit
#+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

#+begin_src emacs-lisp
(use-package evil-magit
  :after magit)
(rune/leader-keys
    "g"  '(:ignore t :which-key "git")
    "gs" '(magit-status :which-key "git status"))
#+end_src

* PDF-Tools
#+begin_src emacs-lisp
(pdf-loader-install)
#+end_src
Now I never want things to automacally open veritcally, I want them to split vertically so
#+begin_src  emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 0)
(add-hook 'doc-view-mode-hook 'auto-revert-mode)
(setq revert-without-query '(".pdf"))
#+end_src

#+RESULTS:
| .pdf |

* Org
** Basic Setup
#+begin_src emacs-lisp
(use-package diminish)
;; (defun dt/org-mode-setup ()
;;   (org-indent-mode)
;;   (variable-pitch-mode 1)
;;   (auto-fill-mode 0)
;;   (visual-line-mode 1)
;;   (setq evil-auto-indent nil)
;;   (diminish org-indent-mode))

(use-package org
  :ensure org-plus-contrib
  :defer t
  :config
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 0
        org-hide-block-startup nil
	org-log-into-drawer t
        org-src-preserve-indentation nil
        org-startup-folded 'content
        org-cycle-separator-lines 2))
;; Autocomple
(setq org-completion-use-ido t)
#+end_src

#+RESULTS:
: t
** References
#+begin_src  emacs-lisp
(use-package org-ref
  :after org
  :init
  (setq org-ref-pdf-directory '("~/Documents/paper2/papers"))
)
#+end_src
** Ignore Headings During Export
This command requires that org mode be install with ensure org-plus-contrib
#+begin_src emacs-lisp
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))
#+end_src
** Org-Noter
#+begin_src emacs-lisp
(use-package org-noter
  :after org)
(require 'org-noter)
#+end_src

#+RESULTS:
: org-noter

** Visuals
#+begin_src emacs-lisp
(use-package org-superstar
  :after org
  :hook (org-mode . org-superstar-mode)
  )

;; Make sure org-indent face is available
(require 'org-indent)

(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
#+end_src

** Code
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(require 'org-tempo)
(rune/leader-keys
"ob"  '(:ignore t :which-key "org-babel")
"obt" '(org-babel-tangle :which-key "org tangle"))
#+end_src

#+RESULTS:

** Agenda
*** Keyboard Shortcuts
#+begin_src emacs-lisp
(rune/leader-keys
"o"  '(:ignore t :which-key "org")
"oa" '(org-agenda :which-key "org agenda")
"od" '(org-deadline :which-key "org deadline")
"os" '(org-schedule :which-key "org schedule")
"ot" '(org-todo :which-key "org todo")
)
#+end_src

*** Todos 
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "APPOINTMENT(a)" "WAITING(w@)" "|" "DONE" "CANCELED")))
#+end_src
The @ symbol requires that the log into drawer be set
#+begin_src emacs-lisp
(setq org-log-into-drawer t)
#+end_src

*** Tag List
#+begin_src emacs-lisp
(setq org-tag-alist
      '((:startgroup)
	(:endgroup)
	("short" . ?s)
	("zoom" . ?z)
	("important" . ?i)
	("urgent" . ?u)
	("easy" . ?e)
	("medium" . ?m)
	("hard" . ?h)
	("email" . ?e)))
#+end_src


*** Agenda Files
#+begin_src emacs-lisp
(setq org-agenda-files
   (quote
    ("~/Dropbox/org/phd.org"
     "~/Dropbox/org/personal.org"
     "~/Dropbox/org/oxyML.org"
     )))
#+end_src

#+RESULTS:
| ~/Documents/MyOrgs/phd.org | ~/Documents/MyOrgs/personal.org | ~/Documents/MyOrgs/oxyML.org |

** Quality of Life Improvments
*** Save all org-files on refiling
#+begin_src emacs-lisp
(advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

** Exports
#+begin_src emacs-lisp
(setq org-file-apps
   (quote
    ((auto-mode . emacs)
     (directory . emacs)
     ("\\.mm\\'" . default)
     ("\\.x?html?\\'" . "firefox %s")
     ("\\.pdf\\'" . org-pdftools))))
#+end_src

#+RESULTS:
: ((auto-mode . emacs) (directory . emacs) (\.mm\' . default) (\.x?html?\' . firefox %s) (\.pdf\' . org-pdftools))

** Plantuml
#+begin_src  emacs-lisp
(setq org-plantuml-jar-path (expand-file-name "/home/dustin/plantuml.jar"))
(add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
(org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
#+end_src

#+RESULTS:


* PDFs
#+begin_src emacs-lisp
 (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    (setq TeX-view-program-selection '((output-pdf "pdf-tools")))
    (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view"))))
#+end_src
* LATEX
Need to install auctex
* IDEs
** LSP
#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deffered)
  :hook ((julia-mode) . lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t)
  :bind (:map lsp-mode-map
         ("TAB" . completion-at-point)))
#+end_src

** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :after lsp-mode
  :ensure t
  :init (global-flycheck-mode))
#+end_src
Remove flymake
#+begin_src emacs-lisp
(delete '("\\.py?\\'" flymake-xml-init) flymake-allowed-file-name-masks)
#+end_src

** PYTHON
*** Keyboar Shortcuts
#+begin_src emacs-lisp
(rune/leader-keys
"p"  '(:ignore t :which-key "python")
"pa" '(pyvenv-activate :which-key "pyvenv activate")
)
#+end_src

#+RESULTS:

*** LSP Server
If activated uses the microsoft python server
#+begin_src emacs-lisp :tangle no
(use-package lsp-python-ms
:ensure t
:init (setq lsp-python-ms-auto-install-server t)
:hook (python-mode . (lambda ()
                        (require 'lsp-python-ms)
                        (lsp))))  ; or lsp-deferred
#+end_src

*** Elpy
#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :init
  (elpy-enable))
(add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))
#+end_src

#+RESULTS:
| lambda | nil | (highlight-indentation-mode -1) |

** R
#+begin_src emacs-lisp
(use-package ess
    :ensure t
    :init (require 'ess-site))

(defun then_R_operator ()
  "R - %>% operator or 'then' pipe operator"
  (interactive)
  (just-one-space 1)
  (insert "%>%")
  (reindent-then-newline-and-indent))
(define-key ess-mode-map (kbd "C-|") 'then_R_operator)
(define-key inferior-ess-mode-map (kbd "C-|") 'then_R_operator)
#+end_src

#+RESULTS:
: then_R_operator

** Julia
#+begin_src  emacs-lisp
(use-package julia-mode
  :ensure t)
#+end_src

#+RESULTS:

